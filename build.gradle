buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.15'
	}
}

plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'application'
	id 'idea'
	id "com.diffplug.spotless" version "5.10.1"
	id "com.google.protobuf" version "0.8.15"
}

repositories {
	mavenCentral()
}

subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java'
	apply plugin: 'application'
	apply plugin: 'idea'
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'com.google.protobuf'

	group = 'com.jleoirab'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '11'

	repositories {
		mavenCentral()
	}

	dependencies {
		def protobufVersion = '3.15.6'
		implementation "com.google.guava:guava:30.1-jre"
		implementation "com.google.protobuf:protobuf-java:$protobufVersion"
		implementation "com.google.protobuf:protobuf-java-util:$protobufVersion"
		compileOnly 'org.projectlombok:lombok:1.18.16'
		annotationProcessor 'org.projectlombok:lombok:1.18.16'

		testCompileOnly 'org.projectlombok:lombok:1.18.16'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
	}

	sourceSets {
		integrationTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir "src/integrationTest/java"
			}
			resources {
				srcDir "src/integrationTest/resources"
			}
		}
	}

	configurations {
		integrationTestCompileOnly.extendsFrom testCompileOnly
		integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
		integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
		integrationTestImplementation.extendsFrom testImplementation
		integrationTestRuntime.extendsFrom testRuntime
	}

	idea {
		module {
			testSourceDirs += file('src/integrationTest/java')
		}
	}

	test {
		useJUnitPlatform()
	}

	task integrationTest(type: Test) {
		testClassesDirs = sourceSets.integrationTest.output.classesDirs
		classpath = sourceSets.integrationTest.runtimeClasspath
		useJUnitPlatform()
	}
	integrationTest.mustRunAfter test

	task allTests {
		dependsOn tasks.test
		dependsOn tasks.integrationTest
	}

	check.dependsOn integrationTest

	spotless {
		format 'misc', {
			// define the files to apply `misc` to
			target '*.gradle', '*.md', '.gitignore'

			// define the steps to apply to those files
			trimTrailingWhitespace()
			indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
			endWithNewline()
		}
		java {
			// don't need to set target, it is inferred from java

			// apply a specific flavor of google-java-format
			googleJavaFormat('1.8').aosp()
		}
	}

	protobuf {
		// Configure the protoc executable
		protoc {
			// Download from repositories
			artifact = 'com.google.protobuf:protoc:3.0.0'
		}
		generateProtoTasks {
			all().each { task ->
				task.builtins {
					java {}
				}
			}
		}
	}

}